{"ast":null,"code":"var _jsxFileName = \"/Users/dummy/Downloads/openlayers-react-map-master/src/Map/Map.js\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport \"./Map.css\";\nimport MapContext from \"./MapContext\";\nimport * as ol from \"ol\";\nimport View from 'ol/View';\nimport { transform } from 'ol/proj';\n\nconst Map = ({\n  children,\n  zoom,\n  center\n}) => {\n  const mapRef = useRef();\n  const [map, setMap] = useState(null); // on component mount\n\n  useEffect(() => {\n    let options = {\n      view: new ol.View({\n        zoom,\n        center\n      }),\n      layers: [],\n      controls: [],\n      overlays: []\n    };\n    let mapObject = new ol.Map(options);\n    mapObject.setTarget(mapRef.current);\n    setMap(mapObject);\n    mapObject.on('click', handleMapClick);\n    return () => mapObject.setTarget(undefined);\n  }, []);\n\n  const handleMapClick = event => {\n    // get clicked coordinate using mapRef to access current React state inside OpenLayers callback\n    //  https://stackoverflow.com/a/60643670\n    // const clickedCoord = map.getCoordinateFromPixel(event.pixel);\n    // // transform coord to EPSG 4326 standard Lat Long\n    //  const transormedCoord = transform(clickedCoord, 'EPSG:3857', 'EPSG:4326')\n    // set React state\n    console.log(mapRef.current); // const viewResolution = new View({\n    //   projection: 'EPSG:3857',\n    //   center: [0, 0],\n    //   zoom: 2\n    // })\n    // mapRef.current.forEachLayerAtPixel(event.pixel, function (layer) {\n    //   switch (layer.get('id')) {\n    // \tcase 'OilAndGas':\n    // \t  var tileWMSSouce = new TileLayer({\n    // \t\tsource: new TileWMS({\n    // \t\t  url: 'http://webdcra.ncrmp.gov.in:8080/geoserver/geonode/wms',\n    // \t\t  // params: {'LAYERS': 'topp:states', 'TILED': true},\n    // \t\t  params: {\n    // \t\t\t'SERVICE': 'WMS', 'VERSION': \"1.1.1\", \"REQUEST\": \"GetFeatureInfo\", \"FORMAT\": \"application/json\", \"TRANSPARENT\": \"true\", \"QUERY_LAYERS\": \"PowerPlant\", \"exceptions\": \"application/vnd.ogc.se_inimage\", \"INFO_FORMAT\": \"application/json\", \"FEATURE_COUNT\": \"50\", \"SRS\": \"EPSG:4326\", 'LAYERS': 'PowerPlant', \"X\": \"50\",\n    // \t\t\t\"Y\": \"50\", \"STYLES\": \"\",\n    // \t\t\t\"WIDTH\": \"101\",\n    // \t\t\t\"HEIGHT\": \"101\"\n    // \t\t  },\n    // \t\t  serverType: 'geoserver',\n    // \t\t  // crossOrigin: 'anonymous',\n    // \t\t  // Countries have transparency, so do not fade tiles:\n    // \t\t  transition: 0,\n    // \t\t})\n    // \t  })\n    // \t  var url = tileWMSSouce.getSource().getFeatureInfoUrl(event.coordinate, viewResolution.getResolution(), viewResolution.getProjection(), 'EPSG:3857', { 'INFO_FORMAT': 'application/json', 'propertyName': 'GRAY_INDEX', })\n    // \t  console.log(\"url1>>>>>\", url)\n    // \t//   fetch(url,)\n    // \t// \t.then(response => response.json())\n    // \t// \t.then(data =>\n    // \t// \t  console.log(\"url1>>>>>\")\n    // \t// \t);\n    //   }\n    // });\n    //     if (url) {\n    // }\n    // setSelectedCoord(transormedCoord)\n  }; // zoom change handler\n\n\n  useEffect(() => {\n    if (!map) return;\n    map.getView().setZoom(zoom);\n  }, [zoom]); // center change handler\n\n  useEffect(() => {\n    if (!map) return;\n    map.getView().setCenter(center);\n  }, [center]);\n  return /*#__PURE__*/React.createElement(MapContext.Provider, {\n    value: {\n      map\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    ref: mapRef,\n    style: {\n      width: '100%',\n      height: \"100vh\",\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 4\n    }\n  }, children));\n};\n\nexport default Map;","map":{"version":3,"sources":["/Users/dummy/Downloads/openlayers-react-map-master/src/Map/Map.js"],"names":["React","useRef","useState","useEffect","MapContext","ol","View","transform","Map","children","zoom","center","mapRef","map","setMap","options","view","layers","controls","overlays","mapObject","setTarget","current","on","handleMapClick","undefined","event","console","log","getView","setZoom","setCenter","width","height","flex"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAASC,SAAT,QAA0B,SAA1B;;AACA,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,IAAZ;AAAkBC,EAAAA;AAAlB,CAAD,KAAgC;AAC3C,QAAMC,MAAM,GAAGX,MAAM,EAArB;AACA,QAAM,CAACY,GAAD,EAAMC,MAAN,IAAgBZ,QAAQ,CAAC,IAAD,CAA9B,CAF2C,CAI3C;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIY,OAAO,GAAG;AACbC,MAAAA,IAAI,EAAE,IAAIX,EAAE,CAACC,IAAP,CAAY;AAAEI,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAZ,CADO;AAEbM,MAAAA,MAAM,EAAE,EAFK;AAGbC,MAAAA,QAAQ,EAAE,EAHG;AAIbC,MAAAA,QAAQ,EAAE;AAJG,KAAd;AAOA,QAAIC,SAAS,GAAG,IAAIf,EAAE,CAACG,GAAP,CAAWO,OAAX,CAAhB;AACAK,IAAAA,SAAS,CAACC,SAAV,CAAoBT,MAAM,CAACU,OAA3B;AACAR,IAAAA,MAAM,CAACM,SAAD,CAAN;AAEAA,IAAAA,SAAS,CAACG,EAAV,CAAa,OAAb,EAAsBC,cAAtB;AACA,WAAO,MAAMJ,SAAS,CAACC,SAAV,CAAoBI,SAApB,CAAb;AACA,GAdQ,EAcN,EAdM,CAAT;;AAgBA,QAAMD,cAAc,GAAIE,KAAD,IAAW;AACjC;AACA;AAEA;AAEA;AACA;AACA;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYhB,MAAM,CAACU,OAAnB,EATiC,CAUjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAIA;AAEA;AACA;AAEE,GA1DH,CArB2C,CAgF3C;;;AACAnB,EAAAA,SAAS,CAAC,MAAM;AACf,QAAI,CAACU,GAAL,EAAU;AAEVA,IAAAA,GAAG,CAACgB,OAAJ,GAAcC,OAAd,CAAsBpB,IAAtB;AACA,GAJQ,EAIN,CAACA,IAAD,CAJM,CAAT,CAjF2C,CAuF3C;;AACAP,EAAAA,SAAS,CAAC,MAAM;AACf,QAAI,CAACU,GAAL,EAAU;AAEVA,IAAAA,GAAG,CAACgB,OAAJ,GAAcE,SAAd,CAAwBpB,MAAxB;AACA,GAJQ,EAIN,CAACA,MAAD,CAJM,CAAT;AAMA,sBACC,oBAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AAAEE,MAAAA;AAAF,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAK,IAAA,GAAG,EAAED,MAAV;AAAkB,IAAA,KAAK,EAAE;AAACoB,MAAAA,KAAK,EAAC,MAAP;AAAcC,MAAAA,MAAM,EAAC,OAArB;AAA8BC,MAAAA,IAAI,EAAC;AAAnC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEzB,QADF,CADD,CADD;AAOA,CArGD;;AAuGA,eAAeD,GAAf","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\"\nimport \"./Map.css\";\nimport MapContext from \"./MapContext\";\nimport * as ol from \"ol\";\nimport View from 'ol/View'\nimport { transform } from 'ol/proj'\nconst Map = ({ children, zoom, center }) => {\n\tconst mapRef = useRef();\n\tconst [map, setMap] = useState(null);\n\n\t// on component mount\n\tuseEffect(() => {\n\t\tlet options = {\n\t\t\tview: new ol.View({ zoom, center }),\n\t\t\tlayers: [],\n\t\t\tcontrols: [],\n\t\t\toverlays: []\n\t\t};\n\n\t\tlet mapObject = new ol.Map(options);\n\t\tmapObject.setTarget(mapRef.current);\n\t\tsetMap(mapObject);\n\n\t\tmapObject.on('click', handleMapClick)\n\t\treturn () => mapObject.setTarget(undefined);\n\t}, []);\n\n\tconst handleMapClick = (event) => {\n\t\t// get clicked coordinate using mapRef to access current React state inside OpenLayers callback\n\t\t//  https://stackoverflow.com/a/60643670\n\t\t\n\t\t// const clickedCoord = map.getCoordinateFromPixel(event.pixel);\n\t\n\t\t// // transform coord to EPSG 4326 standard Lat Long\n\t\t//  const transormedCoord = transform(clickedCoord, 'EPSG:3857', 'EPSG:4326')\n\t\t// set React state\n\t\tconsole.log(mapRef.current)\n\t\t// const viewResolution = new View({\n\t\t//   projection: 'EPSG:3857',\n\t\t//   center: [0, 0],\n\t\t//   zoom: 2\n\t\t// })\n\t\t// mapRef.current.forEachLayerAtPixel(event.pixel, function (layer) {\n\t\t//   switch (layer.get('id')) {\n\t\t// \tcase 'OilAndGas':\n\t\t// \t  var tileWMSSouce = new TileLayer({\n\t\t// \t\tsource: new TileWMS({\n\t\t// \t\t  url: 'http://webdcra.ncrmp.gov.in:8080/geoserver/geonode/wms',\n\t\t// \t\t  // params: {'LAYERS': 'topp:states', 'TILED': true},\n\t\n\t\t// \t\t  params: {\n\t\t// \t\t\t'SERVICE': 'WMS', 'VERSION': \"1.1.1\", \"REQUEST\": \"GetFeatureInfo\", \"FORMAT\": \"application/json\", \"TRANSPARENT\": \"true\", \"QUERY_LAYERS\": \"PowerPlant\", \"exceptions\": \"application/vnd.ogc.se_inimage\", \"INFO_FORMAT\": \"application/json\", \"FEATURE_COUNT\": \"50\", \"SRS\": \"EPSG:4326\", 'LAYERS': 'PowerPlant', \"X\": \"50\",\n\t\t// \t\t\t\"Y\": \"50\", \"STYLES\": \"\",\n\t\t// \t\t\t\"WIDTH\": \"101\",\n\t\t// \t\t\t\"HEIGHT\": \"101\"\n\t\t// \t\t  },\n\t\t// \t\t  serverType: 'geoserver',\n\t\t// \t\t  // crossOrigin: 'anonymous',\n\t\t// \t\t  // Countries have transparency, so do not fade tiles:\n\t\t// \t\t  transition: 0,\n\t\t// \t\t})\n\t\t// \t  })\n\t\n\t\t// \t  var url = tileWMSSouce.getSource().getFeatureInfoUrl(event.coordinate, viewResolution.getResolution(), viewResolution.getProjection(), 'EPSG:3857', { 'INFO_FORMAT': 'application/json', 'propertyName': 'GRAY_INDEX', })\n\t\t// \t  console.log(\"url1>>>>>\", url)\n\t\n\t\t// \t//   fetch(url,)\n\t\t// \t// \t.then(response => response.json())\n\t\t// \t// \t.then(data =>\n\t\t// \t// \t  console.log(\"url1>>>>>\")\n\t\n\t\t// \t// \t);\n\t\t//   }\n\t\n\t\n\t\n\t\t// });\n\t\n\t\n\t\n\t\t//     if (url) {\n\t\n\t\t// }\n\t\t// setSelectedCoord(transormedCoord)\n\t\n\t  }\n\t// zoom change handler\n\tuseEffect(() => {\n\t\tif (!map) return;\n\n\t\tmap.getView().setZoom(zoom);\n\t}, [zoom]);\n\n\t// center change handler\n\tuseEffect(() => {\n\t\tif (!map) return;\n\n\t\tmap.getView().setCenter(center)\n\t}, [center])\n\n\treturn (\n\t\t<MapContext.Provider value={{ map }}>\n\t\t\t<div ref={mapRef} style={{width:'100%',height:\"100vh\", flex:1}} >\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t</MapContext.Provider>\n\t)\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}