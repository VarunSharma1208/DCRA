{"ast":null,"code":"/**\n * @module ol/source/TileDebug\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport XYZ from './XYZ.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { toSize } from '../size.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Optional projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Set to `1` when debugging `VectorTile` sources with a default configuration.\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n * @property {string} [template='z:{z} x:{x} y:{y}'] Template for labeling the tiles.\n * Should include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n */\n\n/**\n * @classdesc\n * A pseudo tile source, which does not fetch tiles from a server, but renders\n * a grid outline for the tile grid/projection along with the coordinates for\n * each tile. See examples/canvas-tiles for an example.\n * @api\n */\n\nvar TileDebug =\n/** @class */\nfunction (_super) {\n  __extends(TileDebug, _super);\n  /**\n   * @param {Options} [opt_options] Debug tile options.\n   */\n\n\n  function TileDebug(opt_options) {\n    var _this = this;\n    /**\n     * @type {Options}\n     */\n\n\n    var options = opt_options || {};\n    _this = _super.call(this, {\n      opaque: false,\n      projection: options.projection,\n      tileGrid: options.tileGrid,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      zDirection: options.zDirection,\n      url: options.template || 'z:{z} x:{x} y:{y}',\n      tileLoadFunction: function (tile, text) {\n        var z = tile.getTileCoord()[0];\n        var tileSize = toSize(_this.tileGrid.getTileSize(z));\n        var context = createCanvasContext2D(tileSize[0], tileSize[1]);\n        context.strokeStyle = 'grey';\n        context.strokeRect(0.5, 0.5, tileSize[0] + 0.5, tileSize[1] + 0.5);\n        context.fillStyle = 'grey';\n        context.strokeStyle = 'white';\n        context.textAlign = 'center';\n        context.textBaseline = 'middle';\n        context.font = '24px sans-serif';\n        context.lineWidth = 4;\n        context.strokeText(text, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n        context.fillText(text, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n        /** @type {import(\"../ImageTile.js\").default} */\n\n        tile.setImage(context.canvas);\n      }\n    }) || this;\n    return _this;\n  }\n\n  return TileDebug;\n}(XYZ);\n\nexport default TileDebug;","map":{"version":3,"sources":["../src/source/TileDebug.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,OAAO,GAAP,MAAgB,UAAhB;AACA,SAAQ,qBAAR,QAAoC,WAApC;AACA,SAAQ,MAAR,QAAqB,YAArB;AAEA;;;;;;;;;;;;;AAaA;;;;;;;;AAOA,IAAA,SAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAwB,EAAA,SAAA,CAAA,SAAA,EAAA,MAAA,CAAA;AACtB;;;;;AAGA,WAAA,SAAA,CAAY,WAAZ,EAAuB;AAAvB,QAAA,KAAA,GAAA,IAAA;AACE;;;;;AAGA,QAAM,OAAO,GAAG,WAAW,IAAI,EAA/B;AAEA,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM;AACJ,MAAA,MAAM,EAAE,KADJ;AAEJ,MAAA,UAAU,EAAE,OAAO,CAAC,UAFhB;AAGJ,MAAA,QAAQ,EAAE,OAAO,CAAC,QAHd;AAIJ,MAAA,KAAK,EAAE,OAAO,CAAC,KAAR,KAAkB,SAAlB,GAA8B,OAAO,CAAC,KAAtC,GAA8C,IAJjD;AAKJ,MAAA,UAAU,EAAE,OAAO,CAAC,UALhB;AAMJ,MAAA,GAAG,EAAE,OAAO,CAAC,QAAR,IAAoB,mBANrB;AAOJ,MAAA,gBAAgB,EAAE,UAAC,IAAD,EAAO,IAAP,EAAW;AAC3B,YAAM,CAAC,GAAG,IAAI,CAAC,YAAL,GAAoB,CAApB,CAAV;AACA,YAAM,QAAQ,GAAG,MAAM,CAAC,KAAI,CAAC,QAAL,CAAc,WAAd,CAA0B,CAA1B,CAAD,CAAvB;AACA,YAAM,OAAO,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAD,CAAT,EAAc,QAAQ,CAAC,CAAD,CAAtB,CAArC;AAEA,QAAA,OAAO,CAAC,WAAR,GAAsB,MAAtB;AACA,QAAA,OAAO,CAAC,UAAR,CAAmB,GAAnB,EAAwB,GAAxB,EAA6B,QAAQ,CAAC,CAAD,CAAR,GAAc,GAA3C,EAAgD,QAAQ,CAAC,CAAD,CAAR,GAAc,GAA9D;AAEA,QAAA,OAAO,CAAC,SAAR,GAAoB,MAApB;AACA,QAAA,OAAO,CAAC,WAAR,GAAsB,OAAtB;AACA,QAAA,OAAO,CAAC,SAAR,GAAoB,QAApB;AACA,QAAA,OAAO,CAAC,YAAR,GAAuB,QAAvB;AACA,QAAA,OAAO,CAAC,IAAR,GAAe,iBAAf;AACA,QAAA,OAAO,CAAC,SAAR,GAAoB,CAApB;AACA,QAAA,OAAO,CAAC,UAAR,CAAmB,IAAnB,EAAyB,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAvC,EAA0C,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAxD,EAA2D,QAAQ,CAAC,CAAD,CAAnE;AACA,QAAA,OAAO,CAAC,QAAR,CAAiB,IAAjB,EAAuB,QAAQ,CAAC,CAAD,CAAR,GAAc,CAArC,EAAwC,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAtD,EAAyD,QAAQ,CAAC,CAAD,CAAjE;AAEA;;AAAkD,QAAA,IAAD,CAAO,QAAP,CAC/C,OAAO,CAAC,MADuC;AAGlD;AA3BG,KAAN,KA4BE,IA5BF;;AA6BD;;AACH,SAAA,SAAA;AAAC,CAxCD,CAAwB,GAAxB,CAAA;;AA0CA,eAAe,SAAf","sourceRoot":"","sourcesContent":["/**\n * @module ol/source/TileDebug\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport XYZ from './XYZ.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { toSize } from '../size.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Optional projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Set to `1` when debugging `VectorTile` sources with a default configuration.\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n * @property {string} [template='z:{z} x:{x} y:{y}'] Template for labeling the tiles.\n * Should include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n */\n/**\n * @classdesc\n * A pseudo tile source, which does not fetch tiles from a server, but renders\n * a grid outline for the tile grid/projection along with the coordinates for\n * each tile. See examples/canvas-tiles for an example.\n * @api\n */\nvar TileDebug = /** @class */ (function (_super) {\n    __extends(TileDebug, _super);\n    /**\n     * @param {Options} [opt_options] Debug tile options.\n     */\n    function TileDebug(opt_options) {\n        var _this = this;\n        /**\n         * @type {Options}\n         */\n        var options = opt_options || {};\n        _this = _super.call(this, {\n            opaque: false,\n            projection: options.projection,\n            tileGrid: options.tileGrid,\n            wrapX: options.wrapX !== undefined ? options.wrapX : true,\n            zDirection: options.zDirection,\n            url: options.template || 'z:{z} x:{x} y:{y}',\n            tileLoadFunction: function (tile, text) {\n                var z = tile.getTileCoord()[0];\n                var tileSize = toSize(_this.tileGrid.getTileSize(z));\n                var context = createCanvasContext2D(tileSize[0], tileSize[1]);\n                context.strokeStyle = 'grey';\n                context.strokeRect(0.5, 0.5, tileSize[0] + 0.5, tileSize[1] + 0.5);\n                context.fillStyle = 'grey';\n                context.strokeStyle = 'white';\n                context.textAlign = 'center';\n                context.textBaseline = 'middle';\n                context.font = '24px sans-serif';\n                context.lineWidth = 4;\n                context.strokeText(text, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n                context.fillText(text, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n                /** @type {import(\"../ImageTile.js\").default} */ (tile).setImage(context.canvas);\n            },\n        }) || this;\n        return _this;\n    }\n    return TileDebug;\n}(XYZ));\nexport default TileDebug;\n//# sourceMappingURL=TileDebug.js.map"]},"metadata":{},"sourceType":"module"}