{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nvar isLocalhost=Boolean(window.location.hostname==='localhost'||// [::1] is the IPv6 localhost address.\nwindow.location.hostname==='[::1]'||// 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));export function register(config){// if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n//   // The URL constructor is available in all browsers that support SW.\n//   const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n//   if (publicUrl.origin !== window.location.origin) {\n//     // Our service worker won't work if PUBLIC_URL is on a different origin\n//     // from what our page is served on. This might happen if a CDN is used to\n//     // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n//     return;\n//   }\n//   window.addEventListener('load', () => {\n//     const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n//     if (isLocalhost) {\n//       // This is running on localhost. Let's check if a service worker still exists or not.\n//       checkValidServiceWorker(swUrl, config);\n//       // Add some additional logging to localhost, pointing developers to the\n//       // service worker/PWA documentation.\n//       navigator.serviceWorker.ready.then(() => {\n//         console.log(\n//           'This web app is being served cache-first by a service ' +\n//             'worker. To learn more, visit https://bit.ly/CRA-PWA'\n//         );\n//       });\n//     } else {\n//       // Is not localhost. Just register service worker\n//       registerValidSW(swUrl, config);\n//     }\n//   });\n// }\n}function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=function(){if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// At this point, the updated precached content has been fetched,\n// but the previous service worker will still serve the older\n// content until all client tabs are closed.\nconsole.log('New content is available and will be used when all '+'tabs for this page are closed. See https://bit.ly/CRA-PWA.');// Execute callback\nif(config&&config.onUpdate){config.onUpdate(registration);}}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log('Content is cached for offline use.');// Execute callback\nif(config&&config.onSuccess){config.onSuccess(registration);}}}};};}).catch(function(error){console.error('Error during service worker registration:',error);});}function checkValidServiceWorker(swUrl,config){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl,{headers:{'Service-Worker':'script'}}).then(function(response){// Ensure service worker exists, and that we really are getting a JS file.\nvar contentType=response.headers.get('content-type');if(response.status===404||contentType!=null&&contentType.indexOf('javascript')===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl,config);}}).catch(function(){console.log('No internet connection found. App is running in offline mode.');});}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();}).catch(function(error){console.error(error.message);});}}","map":{"version":3,"sources":["/Users/dummy/Documents/openlayers-react-map-master/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","registerValidSW","swUrl","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","checkValidServiceWorker","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","message"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA,GAAMA,CAAAA,WAAW,CAAGC,OAAO,CACzBC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,GAA6B,WAA7B,EACE;AACAF,MAAM,CAACC,QAAP,CAAgBC,QAAhB,GAA6B,OAF/B,EAGE;AACAF,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,KAAzB,CACE,wDADF,CALuB,CAA3B,CAUA,MAAO,SAASC,CAAAA,QAAT,CAAkBC,MAAlB,CAA0B,CAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAED,QAASC,CAAAA,eAAT,CAAyBC,KAAzB,CAAgCF,MAAhC,CAAwC,CACtCG,SAAS,CAACC,aAAV,CACGL,QADH,CACYG,KADZ,EAEGG,IAFH,CAEQ,SAAAC,YAAY,CAAI,CACpBA,YAAY,CAACC,aAAb,CAA6B,UAAM,CACjC,GAAMC,CAAAA,gBAAgB,CAAGF,YAAY,CAACG,UAAtC,CACA,GAAID,gBAAgB,EAAI,IAAxB,CAA8B,CAC5B,OACD,CACDA,gBAAgB,CAACE,aAAjB,CAAiC,UAAM,CACrC,GAAIF,gBAAgB,CAACG,KAAjB,GAA2B,WAA/B,CAA4C,CAC1C,GAAIR,SAAS,CAACC,aAAV,CAAwBQ,UAA5B,CAAwC,CACtC;AACA;AACA;AACAC,OAAO,CAACC,GAAR,CACE,sDACE,4DAFJ,EAKA;AACA,GAAId,MAAM,EAAIA,MAAM,CAACe,QAArB,CAA+B,CAC7Bf,MAAM,CAACe,QAAP,CAAgBT,YAAhB,EACD,CACF,CAbD,IAaO,CACL;AACA;AACA;AACAO,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAEA;AACA,GAAId,MAAM,EAAIA,MAAM,CAACgB,SAArB,CAAgC,CAC9BhB,MAAM,CAACgB,SAAP,CAAiBV,YAAjB,EACD,CACF,CACF,CACF,CA3BD,CA4BD,CAjCD,CAkCD,CArCH,EAsCGW,KAtCH,CAsCS,SAAAC,KAAK,CAAI,CACdL,OAAO,CAACK,KAAR,CAAc,2CAAd,CAA2DA,KAA3D,EACD,CAxCH,EAyCD,CAED,QAASC,CAAAA,uBAAT,CAAiCjB,KAAjC,CAAwCF,MAAxC,CAAgD,CAC9C;AACAoB,KAAK,CAAClB,KAAD,CAAQ,CACXmB,OAAO,CAAE,CAAE,iBAAkB,QAApB,CADE,CAAR,CAAL,CAGGhB,IAHH,CAGQ,SAAAiB,QAAQ,CAAI,CAChB;AACA,GAAMC,CAAAA,WAAW,CAAGD,QAAQ,CAACD,OAAT,CAAiBG,GAAjB,CAAqB,cAArB,CAApB,CACA,GACEF,QAAQ,CAACG,MAAT,GAAoB,GAApB,EACCF,WAAW,EAAI,IAAf,EAAuBA,WAAW,CAACG,OAAZ,CAAoB,YAApB,IAAsC,CAAC,CAFjE,CAGE,CACA;AACAvB,SAAS,CAACC,aAAV,CAAwBuB,KAAxB,CAA8BtB,IAA9B,CAAmC,SAAAC,YAAY,CAAI,CACjDA,YAAY,CAACsB,UAAb,GAA0BvB,IAA1B,CAA+B,UAAM,CACnCV,MAAM,CAACC,QAAP,CAAgBiC,MAAhB,GACD,CAFD,EAGD,CAJD,EAKD,CAVD,IAUO,CACL;AACA5B,eAAe,CAACC,KAAD,CAAQF,MAAR,CAAf,CACD,CACF,CApBH,EAqBGiB,KArBH,CAqBS,UAAM,CACXJ,OAAO,CAACC,GAAR,CACE,+DADF,EAGD,CAzBH,EA0BD,CAED,MAAO,SAASc,CAAAA,UAAT,EAAsB,CAC3B,GAAI,iBAAmBzB,CAAAA,SAAvB,CAAkC,CAChCA,SAAS,CAACC,aAAV,CAAwBuB,KAAxB,CACGtB,IADH,CACQ,SAAAC,YAAY,CAAI,CACpBA,YAAY,CAACsB,UAAb,GACD,CAHH,EAIGX,KAJH,CAIS,SAAAC,KAAK,CAAI,CACdL,OAAO,CAACK,KAAR,CAAcA,KAAK,CAACY,OAApB,EACD,CANH,EAOD,CACF","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  // if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n  //   // The URL constructor is available in all browsers that support SW.\n  //   const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n  //   if (publicUrl.origin !== window.location.origin) {\n  //     // Our service worker won't work if PUBLIC_URL is on a different origin\n  //     // from what our page is served on. This might happen if a CDN is used to\n  //     // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n  //     return;\n  //   }\n\n  //   window.addEventListener('load', () => {\n  //     const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n  //     if (isLocalhost) {\n  //       // This is running on localhost. Let's check if a service worker still exists or not.\n  //       checkValidServiceWorker(swUrl, config);\n\n  //       // Add some additional logging to localhost, pointing developers to the\n  //       // service worker/PWA documentation.\n  //       navigator.serviceWorker.ready.then(() => {\n  //         console.log(\n  //           'This web app is being served cache-first by a service ' +\n  //             'worker. To learn more, visit https://bit.ly/CRA-PWA'\n  //         );\n  //       });\n  //     } else {\n  //       // Is not localhost. Just register service worker\n  //       registerValidSW(swUrl, config);\n  //     }\n  //   });\n  // }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}