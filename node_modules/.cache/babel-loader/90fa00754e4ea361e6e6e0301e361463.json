{"ast":null,"code":"const registry = new Map();\nexport function addDecoder(cases, importFn) {\n  if (!Array.isArray(cases)) {\n    cases = [cases]; // eslint-disable-line no-param-reassign\n  }\n\n  cases.forEach(c => registry.set(c, importFn));\n}\nexport async function getDecoder(fileDirectory) {\n  const importFn = registry.get(fileDirectory.Compression);\n\n  if (!importFn) {\n    throw new Error(`Unknown compression method identifier: ${fileDirectory.Compression}`);\n  }\n\n  const Decoder = await importFn();\n  return new Decoder(fileDirectory);\n} // Add default decoders to registry (end-user may override with other implementations)\n\naddDecoder([undefined, 1], () => import('./raw').then(m => m.default));\naddDecoder(5, () => import('./lzw').then(m => m.default));\naddDecoder(6, () => {\n  throw new Error('old style JPEG compression is not supported.');\n});\naddDecoder(7, () => import('./jpeg').then(m => m.default));\naddDecoder([8, 32946], () => import('./deflate').then(m => m.default));\naddDecoder(32773, () => import('./packbits').then(m => m.default));\naddDecoder(34887, () => import('./lerc').then(m => m.default));","map":{"version":3,"sources":["/Users/dummy/Documents/openlayers-react-map-master/node_modules/geotiff/src/compression/index.js"],"names":["registry","Map","addDecoder","cases","importFn","Array","isArray","forEach","c","set","getDecoder","fileDirectory","get","Compression","Error","Decoder","undefined","then","m","default"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,IAAIC,GAAJ,EAAjB;AAEA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,QAA3B,EAAqC;AAC1C,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAL,EAA2B;AACzBA,IAAAA,KAAK,GAAG,CAACA,KAAD,CAAR,CADyB,CACR;AAClB;;AACDA,EAAAA,KAAK,CAACI,OAAN,CAAeC,CAAD,IAAOR,QAAQ,CAACS,GAAT,CAAaD,CAAb,EAAgBJ,QAAhB,CAArB;AACD;AAED,OAAO,eAAeM,UAAf,CAA0BC,aAA1B,EAAyC;AAC9C,QAAMP,QAAQ,GAAGJ,QAAQ,CAACY,GAAT,CAAaD,aAAa,CAACE,WAA3B,CAAjB;;AACA,MAAI,CAACT,QAAL,EAAe;AACb,UAAM,IAAIU,KAAJ,CAAW,0CAAyCH,aAAa,CAACE,WAAY,EAA9E,CAAN;AACD;;AACD,QAAME,OAAO,GAAG,MAAMX,QAAQ,EAA9B;AACA,SAAO,IAAIW,OAAJ,CAAYJ,aAAZ,CAAP;AACD,C,CAED;;AACAT,UAAU,CAAC,CAACc,SAAD,EAAY,CAAZ,CAAD,EAAiB,MAAM,OAAO,OAAP,EAAgBC,IAAhB,CAAsBC,CAAD,IAAOA,CAAC,CAACC,OAA9B,CAAvB,CAAV;AACAjB,UAAU,CAAC,CAAD,EAAI,MAAM,OAAO,OAAP,EAAgBe,IAAhB,CAAsBC,CAAD,IAAOA,CAAC,CAACC,OAA9B,CAAV,CAAV;AACAjB,UAAU,CAAC,CAAD,EAAI,MAAM;AAClB,QAAM,IAAIY,KAAJ,CAAU,8CAAV,CAAN;AACD,CAFS,CAAV;AAGAZ,UAAU,CAAC,CAAD,EAAI,MAAM,OAAO,QAAP,EAAiBe,IAAjB,CAAuBC,CAAD,IAAOA,CAAC,CAACC,OAA/B,CAAV,CAAV;AACAjB,UAAU,CAAC,CAAC,CAAD,EAAI,KAAJ,CAAD,EAAa,MAAM,OAAO,WAAP,EAAoBe,IAApB,CAA0BC,CAAD,IAAOA,CAAC,CAACC,OAAlC,CAAnB,CAAV;AACAjB,UAAU,CAAC,KAAD,EAAQ,MAAM,OAAO,YAAP,EAAqBe,IAArB,CAA2BC,CAAD,IAAOA,CAAC,CAACC,OAAnC,CAAd,CAAV;AACAjB,UAAU,CAAC,KAAD,EAAQ,MAAM,OAAO,QAAP,EAAiBe,IAAjB,CAAuBC,CAAD,IAAOA,CAAC,CAACC,OAA/B,CAAd,CAAV","sourcesContent":["const registry = new Map();\n\nexport function addDecoder(cases, importFn) {\n  if (!Array.isArray(cases)) {\n    cases = [cases]; // eslint-disable-line no-param-reassign\n  }\n  cases.forEach((c) => registry.set(c, importFn));\n}\n\nexport async function getDecoder(fileDirectory) {\n  const importFn = registry.get(fileDirectory.Compression);\n  if (!importFn) {\n    throw new Error(`Unknown compression method identifier: ${fileDirectory.Compression}`);\n  }\n  const Decoder = await importFn();\n  return new Decoder(fileDirectory);\n}\n\n// Add default decoders to registry (end-user may override with other implementations)\naddDecoder([undefined, 1], () => import('./raw').then((m) => m.default));\naddDecoder(5, () => import('./lzw').then((m) => m.default));\naddDecoder(6, () => {\n  throw new Error('old style JPEG compression is not supported.');\n});\naddDecoder(7, () => import('./jpeg').then((m) => m.default));\naddDecoder([8, 32946], () => import('./deflate').then((m) => m.default));\naddDecoder(32773, () => import('./packbits').then((m) => m.default));\naddDecoder(34887, () => import('./lerc').then((m) => m.default));\n"]},"metadata":{},"sourceType":"module"}