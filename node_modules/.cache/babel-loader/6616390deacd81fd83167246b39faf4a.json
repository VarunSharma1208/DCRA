{"ast":null,"code":"var _jsxFileName = \"/Users/dummy/Downloads/openlayers-react-map-master/src/App.js\";\nimport React, { useState } from \"react\";\nimport Map from \"./Map\";\nimport { Layers, TileLayer, VectorLayer } from \"./Layers\";\nimport { Style, Icon } from \"ol/style\";\nimport Feature from \"ol/Feature\";\nimport Point from \"ol/geom/Point\";\nimport { osm, vector, wms } from \"./Source\";\nimport { fromLonLat, get } from \"ol/proj\";\nimport GeoJSON from \"ol/format/GeoJSON\";\nimport { Controls, FullScreenControl } from \"./Controls\";\nimport FeatureStyles from \"./Features/Styles\";\nimport mapConfig from \"./config.json\";\nimport \"./App.css\";\nconst geojsonObject = mapConfig.geojsonObject;\nconst geojsonObject2 = mapConfig.geojsonObject2;\nconst markersLonLat = [mapConfig.kansasCityLonLat, mapConfig.blueSpringsLonLat];\n\nfunction addMarkers(lonLatArray) {\n  var iconStyle = new Style({\n    image: new Icon({\n      anchorXUnits: \"fraction\",\n      anchorYUnits: \"pixels\",\n      src: mapConfig.markerImage32\n    })\n  });\n  let features = lonLatArray.map(item => {\n    let feature = new Feature({\n      geometry: new Point(fromLonLat(item))\n    });\n    feature.setStyle(iconStyle);\n    return feature;\n  });\n  return features;\n}\n\nconst App = () => {\n  const [center, setCenter] = useState([-94.9065, 38.9884]);\n  const [zoom, setZoom] = useState(0);\n  const [showLayer1, setShowLayer1] = useState(true);\n  const [showLayer2, setShowLayer2] = useState(true);\n  const [showMarker, setShowMarker] = useState(false);\n  const [features, setFeatures] = useState(addMarkers(markersLonLat));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Map, {\n    center: fromLonLat(center),\n    zoom: zoom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Layers, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TileLayer, {\n    source: osm(),\n    zIndex: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }), showLayer1 && /*#__PURE__*/React.createElement(VectorLayer, {\n    source: vector({\n      features: new GeoJSON().readFeatures(geojsonObject, {\n        featureProjection: get(\"EPSG:3857\")\n      })\n    }),\n    style: FeatureStyles.MultiPolygon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }), showLayer2 && /*#__PURE__*/React.createElement(TileLayer, {\n    source: wms({\n      url: 'http://webdcra.ncrmp.gov.in:8080/geoserver/geonode/wms',\n      params: {\n        'layers': 'PowerPlant'\n      },\n      serverType: 'geoserver',\n      transition: 0\n    }),\n    zIndex: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Controls, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FullScreenControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    checked: showLayer1,\n    onChange: event => setShowLayer1(event.target.checked),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }), \" \", \"Johnson County\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    checked: showLayer2,\n    onChange: event => setShowLayer2(event.target.checked),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }), \" \", \"Wyandotte County\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    checked: showMarker,\n    onChange: event => setShowMarker(event.target.checked),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }), \" \", \"Show markers\"));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/dummy/Downloads/openlayers-react-map-master/src/App.js"],"names":["React","useState","Map","Layers","TileLayer","VectorLayer","Style","Icon","Feature","Point","osm","vector","wms","fromLonLat","get","GeoJSON","Controls","FullScreenControl","FeatureStyles","mapConfig","geojsonObject","geojsonObject2","markersLonLat","kansasCityLonLat","blueSpringsLonLat","addMarkers","lonLatArray","iconStyle","image","anchorXUnits","anchorYUnits","src","markerImage32","features","map","item","feature","geometry","setStyle","App","center","setCenter","zoom","setZoom","showLayer1","setShowLayer1","showLayer2","setShowLayer2","showMarker","setShowMarker","setFeatures","readFeatures","featureProjection","MultiPolygon","url","params","serverType","transition","event","target","checked"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Map from \"./Map\";\nimport { Layers, TileLayer, VectorLayer } from \"./Layers\";\nimport { Style, Icon } from \"ol/style\";\nimport Feature from \"ol/Feature\";\nimport Point from \"ol/geom/Point\";\nimport { osm, vector, wms } from \"./Source\";\nimport { fromLonLat, get } from \"ol/proj\";\nimport GeoJSON from \"ol/format/GeoJSON\";\nimport { Controls, FullScreenControl } from \"./Controls\";\nimport FeatureStyles from \"./Features/Styles\";\n\nimport mapConfig from \"./config.json\";\nimport \"./App.css\";\n\nconst geojsonObject = mapConfig.geojsonObject;\nconst geojsonObject2 = mapConfig.geojsonObject2;\nconst markersLonLat = [mapConfig.kansasCityLonLat, mapConfig.blueSpringsLonLat];\n\nfunction addMarkers(lonLatArray) {\n  var iconStyle = new Style({\n    image: new Icon({\n      anchorXUnits: \"fraction\",\n      anchorYUnits: \"pixels\",\n      src: mapConfig.markerImage32,\n    }),\n  });\n  let features = lonLatArray.map((item) => {\n    let feature = new Feature({\n      geometry: new Point(fromLonLat(item)),\n    });\n    feature.setStyle(iconStyle);\n    return feature;\n  });\n  return features;\n}\n\nconst App = () => {\n  const [center, setCenter] = useState([-94.9065, 38.9884]);\n  const [zoom, setZoom] = useState(0);\n\n  const [showLayer1, setShowLayer1] = useState(true);\n  const [showLayer2, setShowLayer2] = useState(true);\n  const [showMarker, setShowMarker] = useState(false);\n\n  const [features, setFeatures] = useState(addMarkers(markersLonLat));\n\n  return (\n    <div>\n      <Map center={fromLonLat(center)} zoom={zoom}>\n        <Layers>\n          <TileLayer source={osm()} zIndex={0} />\n         \n          {showLayer1 && (\n            <VectorLayer\n              source={vector({\n                features: new GeoJSON().readFeatures(geojsonObject, {\n                  featureProjection: get(\"EPSG:3857\"),\n                }),\n              })}\n              style={FeatureStyles.MultiPolygon}\n            />\n          )}\n          {showLayer2 && (\n            <TileLayer source={wms({\n              url: 'http://webdcra.ncrmp.gov.in:8080/geoserver/geonode/wms',\n              params: { 'layers': 'PowerPlant' },\n              serverType: 'geoserver',\n              transition: 0,\n            })} zIndex={1} />\n          )}\n          {/* {showMarker && <VectorLayer source={vector({ features })} />} */}\n        </Layers>\n        <Controls>\n          <FullScreenControl />\n        </Controls>\n      </Map>\n      <div>\n        <input\n          type=\"checkbox\"\n          checked={showLayer1}\n          onChange={(event) => setShowLayer1(event.target.checked)}\n        />{\" \"}\n        Johnson County\n      </div>\n      <div>\n        <input\n          type=\"checkbox\"\n          checked={showLayer2}\n          onChange={(event) => setShowLayer2(event.target.checked)}\n        />{\" \"}\n        Wyandotte County\n      </div>\n      <hr />\n      <div>\n        <input\n          type=\"checkbox\"\n          checked={showMarker}\n          onChange={(event) => setShowMarker(event.target.checked)}\n        />{\" \"}\n        Show markers\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}