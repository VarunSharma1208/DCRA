{"ast":null,"code":"import _slicedToArray from\"/Users/dummy/Documents/openlayers-react-map-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useRef,useState,useEffect}from\"react\";import\"./Map.css\";import MapContext from\"./MapContext\";import*as ol from\"ol\";import View from'ol/View';import{transform}from'ol/proj';var Map=function Map(_ref){var children=_ref.children,zoom=_ref.zoom,center=_ref.center;var mapRef=useRef();var _useState=useState(null),_useState2=_slicedToArray(_useState,2),map=_useState2[0],setMap=_useState2[1];// on component mount\nuseEffect(function(){var options={view:new ol.View({zoom:zoom,center:center}),layers:[],controls:[],overlays:[]};var mapObject=new ol.Map(options);mapObject.setTarget(mapRef.current);setMap(mapObject);mapObject.on('click',handleMapClick);return function(){return mapObject.setTarget(undefined);};},[]);var handleMapClick=function handleMapClick(event){// get clicked coordinate using mapRef to access current React state inside OpenLayers callback\n//  https://stackoverflow.com/a/60643670\n// const clickedCoord = map.getCoordinateFromPixel(event.pixel);\n// // transform coord to EPSG 4326 standard Lat Long\n//  const transormedCoord = transform(clickedCoord, 'EPSG:3857', 'EPSG:4326')\n// set React state\nconsole.log(mapRef);// const viewResolution = new View({\n//   projection: 'EPSG:3857',\n//   center: [0, 0],\n//   zoom: 2\n// })\n// mapRef.current.forEachLayerAtPixel(event.pixel, function (layer) {\n//   switch (layer.get('id')) {\n// \tcase 'OilAndGas':\n// \t  var tileWMSSouce = new TileLayer({\n// \t\tsource: new TileWMS({\n// \t\t  url: 'http://webdcra.ncrmp.gov.in:8080/geoserver/geonode/wms',\n// \t\t  // params: {'LAYERS': 'topp:states', 'TILED': true},\n// \t\t  params: {\n// \t\t\t'SERVICE': 'WMS', 'VERSION': \"1.1.1\", \"REQUEST\": \"GetFeatureInfo\", \"FORMAT\": \"application/json\", \"TRANSPARENT\": \"true\", \"QUERY_LAYERS\": \"PowerPlant\", \"exceptions\": \"application/vnd.ogc.se_inimage\", \"INFO_FORMAT\": \"application/json\", \"FEATURE_COUNT\": \"50\", \"SRS\": \"EPSG:4326\", 'LAYERS': 'PowerPlant', \"X\": \"50\",\n// \t\t\t\"Y\": \"50\", \"STYLES\": \"\",\n// \t\t\t\"WIDTH\": \"101\",\n// \t\t\t\"HEIGHT\": \"101\"\n// \t\t  },\n// \t\t  serverType: 'geoserver',\n// \t\t  // crossOrigin: 'anonymous',\n// \t\t  // Countries have transparency, so do not fade tiles:\n// \t\t  transition: 0,\n// \t\t})\n// \t  })\n// \t  var url = tileWMSSouce.getSource().getFeatureInfoUrl(event.coordinate, viewResolution.getResolution(), viewResolution.getProjection(), 'EPSG:3857', { 'INFO_FORMAT': 'application/json', 'propertyName': 'GRAY_INDEX', })\n// \t  console.log(\"url1>>>>>\", url)\n// \t//   fetch(url,)\n// \t// \t.then(response => response.json())\n// \t// \t.then(data =>\n// \t// \t  console.log(\"url1>>>>>\")\n// \t// \t);\n//   }\n// });\n//     if (url) {\n// }\n// setSelectedCoord(transormedCoord)\n};// zoom change handler\nuseEffect(function(){if(!map)return;map.getView().setZoom(zoom);},[zoom]);// center change handler\nuseEffect(function(){if(!map)return;map.getView().setCenter(center);},[center]);return/*#__PURE__*/React.createElement(MapContext.Provider,{value:{map:map}},/*#__PURE__*/React.createElement(\"div\",{ref:mapRef,style:{width:'100%',height:\"100vh\",flex:1}},children));};export default Map;","map":{"version":3,"sources":["/Users/dummy/Documents/openlayers-react-map-master/src/Map/Map.js"],"names":["React","useRef","useState","useEffect","MapContext","ol","View","transform","Map","children","zoom","center","mapRef","map","setMap","options","view","layers","controls","overlays","mapObject","setTarget","current","on","handleMapClick","undefined","event","console","log","getView","setZoom","setCenter","width","height","flex"],"mappings":"yKAAA,MAAOA,CAAAA,KAAP,EAAgBC,MAAhB,CAAwBC,QAAxB,CAAkCC,SAAlC,KAAmD,OAAnD,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,MAAO,GAAKC,CAAAA,EAAZ,KAAoB,IAApB,CACA,MAAOC,CAAAA,IAAP,KAAiB,SAAjB,CACA,OAASC,SAAT,KAA0B,SAA1B,CACA,GAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,MAAgC,IAA7BC,CAAAA,QAA6B,MAA7BA,QAA6B,CAAnBC,IAAmB,MAAnBA,IAAmB,CAAbC,MAAa,MAAbA,MAAa,CAC3C,GAAMC,CAAAA,MAAM,CAAGX,MAAM,EAArB,CAD2C,cAErBC,QAAQ,CAAC,IAAD,CAFa,wCAEpCW,GAFoC,eAE/BC,MAF+B,eAI3C;AACAX,SAAS,CAAC,UAAM,CACf,GAAIY,CAAAA,OAAO,CAAG,CACbC,IAAI,CAAE,GAAIX,CAAAA,EAAE,CAACC,IAAP,CAAY,CAAEI,IAAI,CAAJA,IAAF,CAAQC,MAAM,CAANA,MAAR,CAAZ,CADO,CAEbM,MAAM,CAAE,EAFK,CAGbC,QAAQ,CAAE,EAHG,CAIbC,QAAQ,CAAE,EAJG,CAAd,CAOA,GAAIC,CAAAA,SAAS,CAAG,GAAIf,CAAAA,EAAE,CAACG,GAAP,CAAWO,OAAX,CAAhB,CACAK,SAAS,CAACC,SAAV,CAAoBT,MAAM,CAACU,OAA3B,EACAR,MAAM,CAACM,SAAD,CAAN,CAEAA,SAAS,CAACG,EAAV,CAAa,OAAb,CAAsBC,cAAtB,EACA,MAAO,kBAAMJ,CAAAA,SAAS,CAACC,SAAV,CAAoBI,SAApB,CAAN,EAAP,CACA,CAdQ,CAcN,EAdM,CAAT,CAgBA,GAAMD,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACE,KAAD,CAAW,CACjC;AACA;AAEA;AAEA;AACA;AACA;AACAC,OAAO,CAACC,GAAR,CAAYhB,MAAZ,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAIA;AAEA;AACA;AAEE,CA1DH,CA2DA;AACAT,SAAS,CAAC,UAAM,CACf,GAAI,CAACU,GAAL,CAAU,OAEVA,GAAG,CAACgB,OAAJ,GAAcC,OAAd,CAAsBpB,IAAtB,EACA,CAJQ,CAIN,CAACA,IAAD,CAJM,CAAT,CAMA;AACAP,SAAS,CAAC,UAAM,CACf,GAAI,CAACU,GAAL,CAAU,OAEVA,GAAG,CAACgB,OAAJ,GAAcE,SAAd,CAAwBpB,MAAxB,EACA,CAJQ,CAIN,CAACA,MAAD,CAJM,CAAT,CAMA,mBACC,oBAAC,UAAD,CAAY,QAAZ,EAAqB,KAAK,CAAE,CAAEE,GAAG,CAAHA,GAAF,CAA5B,eACC,2BAAK,GAAG,CAAED,MAAV,CAAkB,KAAK,CAAE,CAACoB,KAAK,CAAC,MAAP,CAAcC,MAAM,CAAC,OAArB,CAA8BC,IAAI,CAAC,CAAnC,CAAzB,EACEzB,QADF,CADD,CADD,CAOA,CArGD,CAuGA,cAAeD,CAAAA,GAAf","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\"\nimport \"./Map.css\";\nimport MapContext from \"./MapContext\";\nimport * as ol from \"ol\";\nimport View from 'ol/View'\nimport { transform } from 'ol/proj'\nconst Map = ({ children, zoom, center }) => {\n\tconst mapRef = useRef();\n\tconst [map, setMap] = useState(null);\n\n\t// on component mount\n\tuseEffect(() => {\n\t\tlet options = {\n\t\t\tview: new ol.View({ zoom, center }),\n\t\t\tlayers: [],\n\t\t\tcontrols: [],\n\t\t\toverlays: []\n\t\t};\n\n\t\tlet mapObject = new ol.Map(options);\n\t\tmapObject.setTarget(mapRef.current);\n\t\tsetMap(mapObject);\n\n\t\tmapObject.on('click', handleMapClick)\n\t\treturn () => mapObject.setTarget(undefined);\n\t}, []);\n\n\tconst handleMapClick = (event) => {\n\t\t// get clicked coordinate using mapRef to access current React state inside OpenLayers callback\n\t\t//  https://stackoverflow.com/a/60643670\n\t\t\n\t\t// const clickedCoord = map.getCoordinateFromPixel(event.pixel);\n\t\n\t\t// // transform coord to EPSG 4326 standard Lat Long\n\t\t//  const transormedCoord = transform(clickedCoord, 'EPSG:3857', 'EPSG:4326')\n\t\t// set React state\n\t\tconsole.log(mapRef)\n\t\t// const viewResolution = new View({\n\t\t//   projection: 'EPSG:3857',\n\t\t//   center: [0, 0],\n\t\t//   zoom: 2\n\t\t// })\n\t\t// mapRef.current.forEachLayerAtPixel(event.pixel, function (layer) {\n\t\t//   switch (layer.get('id')) {\n\t\t// \tcase 'OilAndGas':\n\t\t// \t  var tileWMSSouce = new TileLayer({\n\t\t// \t\tsource: new TileWMS({\n\t\t// \t\t  url: 'http://webdcra.ncrmp.gov.in:8080/geoserver/geonode/wms',\n\t\t// \t\t  // params: {'LAYERS': 'topp:states', 'TILED': true},\n\t\n\t\t// \t\t  params: {\n\t\t// \t\t\t'SERVICE': 'WMS', 'VERSION': \"1.1.1\", \"REQUEST\": \"GetFeatureInfo\", \"FORMAT\": \"application/json\", \"TRANSPARENT\": \"true\", \"QUERY_LAYERS\": \"PowerPlant\", \"exceptions\": \"application/vnd.ogc.se_inimage\", \"INFO_FORMAT\": \"application/json\", \"FEATURE_COUNT\": \"50\", \"SRS\": \"EPSG:4326\", 'LAYERS': 'PowerPlant', \"X\": \"50\",\n\t\t// \t\t\t\"Y\": \"50\", \"STYLES\": \"\",\n\t\t// \t\t\t\"WIDTH\": \"101\",\n\t\t// \t\t\t\"HEIGHT\": \"101\"\n\t\t// \t\t  },\n\t\t// \t\t  serverType: 'geoserver',\n\t\t// \t\t  // crossOrigin: 'anonymous',\n\t\t// \t\t  // Countries have transparency, so do not fade tiles:\n\t\t// \t\t  transition: 0,\n\t\t// \t\t})\n\t\t// \t  })\n\t\n\t\t// \t  var url = tileWMSSouce.getSource().getFeatureInfoUrl(event.coordinate, viewResolution.getResolution(), viewResolution.getProjection(), 'EPSG:3857', { 'INFO_FORMAT': 'application/json', 'propertyName': 'GRAY_INDEX', })\n\t\t// \t  console.log(\"url1>>>>>\", url)\n\t\n\t\t// \t//   fetch(url,)\n\t\t// \t// \t.then(response => response.json())\n\t\t// \t// \t.then(data =>\n\t\t// \t// \t  console.log(\"url1>>>>>\")\n\t\n\t\t// \t// \t);\n\t\t//   }\n\t\n\t\n\t\n\t\t// });\n\t\n\t\n\t\n\t\t//     if (url) {\n\t\n\t\t// }\n\t\t// setSelectedCoord(transormedCoord)\n\t\n\t  }\n\t// zoom change handler\n\tuseEffect(() => {\n\t\tif (!map) return;\n\n\t\tmap.getView().setZoom(zoom);\n\t}, [zoom]);\n\n\t// center change handler\n\tuseEffect(() => {\n\t\tif (!map) return;\n\n\t\tmap.getView().setCenter(center)\n\t}, [center])\n\n\treturn (\n\t\t<MapContext.Provider value={{ map }}>\n\t\t\t<div ref={mapRef} style={{width:'100%',height:\"100vh\", flex:1}} >\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t</MapContext.Provider>\n\t)\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}